{"config":{"lang":["en","es","pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#geonode-cloud","title":"GeoNode Cloud","text":"<p>GeoNode Cloud is an advanced cloud-based implementation of the GeoNode platform, optimized for leveraging native or cloud-adapted technologies. This solution is designed to be deployed on Kubernetes, enabling scalability, efficient management, and resilience.</p> <p>GeoNode Cloud includes the GeoServer Cloud project, which provides strong support for the publication, editing, and management of geospatial data. This integration reinforces GeoNode Cloud\u2019s role as a modern, efficient infrastructure for managing geospatial information in the cloud.</p> <p>By using GeoNode Cloud, organizations can benefit from increased flexibility, reduced operational costs, and seamless integration with other cloud-native tools and services.</p>"},{"location":"architecture/","title":"Architecture &amp; Technology","text":"<p>The solution architecture is divided into the following components:</p> <ul> <li>GeoNode Cloud Core: Contains the foundational infrastructure elements of GeoNode in the cloud.</li> <li>GeoNode Cloud Mapstore Client: Provides the user interface for map visualization and manipulation.</li> <li>RabbitMQ: A message broker that facilitates asynchronous communication between services.</li> <li>GeoServer Cloud: Manages and publishes geospatial data.</li> <li>Postgres with PostGIS extension:  A relational database that allows spatial data storage and querying.</li> <li>Nginx:  A web server and load balancer.</li> <li>Flower:  A Celery task monitor.</li> </ul> <p>The GeoNode Cloud Core component includes the following main technologies for its operation:</p> <ul> <li>Django Framework</li> <li>Memcached</li> <li>GeoNode Import</li> <li>pyCSW</li> <li>Celery</li> <li>GeoServer App Django - ACL Capability</li> </ul> <p>The architecture is based on a microservices approach, with plans to gradually decompose components currently within the monolithic Django setup into separate microservices.</p>"},{"location":"architecture/#distribution-and-deployment","title":"Distribution and Deployment","text":"<p>Docker images for all services are available on DockerHub under the KAN Territory &amp; IT organization.</p> <p>Production-ready deployment files for <code>docker-compose</code> and <code>podman</code> are available in the docs/deploy folder.</p>"},{"location":"architecture/#contributing","title":"Contributing","text":"<p>Please read the contribution guidelines before submitting pull requests to the GeoNode Cloud project.</p> <p>Follow the developer's guide for more details on the project's technical aspects.</p>"},{"location":"architecture/#status","title":"Status","text":"<p>Check the changelog for the latest updates.</p>"},{"location":"architecture/#bugs","title":"Bugs","text":"<p>Report issues for GeoNode Cloud on the Issues GitHub page.</p>"},{"location":"architecture/#roadmap","title":"Roadmap","text":"<p>To be determined (TBD).</p>"},{"location":"deployment/eks/","title":"Deployment on EKS","text":""},{"location":"deployment/eks/#1-configuring-oidc-providers-and-iam-for-eks","title":"1. Configuring OIDC Providers and IAM for EKS","text":"<p>Associate the OIDC provider with the <code>testGeonode</code> cluster:</p> <pre><code>eksctl utils associate-iam-oidc-provider --region us-east-1 --cluster testGeonode --approve\n</code></pre>"},{"location":"deployment/eks/#2-creating-the-iam-service-account-for-aws-load-balancer-controller","title":"2. Creating the IAM Service Account for AWS Load Balancer Controller","text":"<p>To create the IAM service account and the required policy for the AWS Load Balancer Controller:</p> <p>Create the IAM policy from the policy file:</p> <pre><code>curl -o iam_policy.json https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/main/docs/install/iam_policy.json\naws iam create-policy --policy-name AWSLoadBalancerControllerIAMPolicy --policy-document file://iam_policy.json\n</code></pre> <p>Create the IAM service account:</p> <pre><code>eksctl create iamserviceaccount \\\n    --cluster=testGeonode \\\n    --namespace=kube-system \\\n    --name=aws-load-balancer-controller \\\n    --attach-policy-arn=arn:aws:iam::XXX:policy/AWSLoadBalancerControllerIAMPolicy \\\n    --override-existing-serviceaccounts \\\n    --approve\n</code></pre>"},{"location":"deployment/eks/#3-installing-aws-load-balancer-controller-with-helm","title":"3. Installing AWS Load Balancer Controller with Helm","text":"<p>Add the EKS Helm repository and update:</p> <p><pre><code>helm repo add eks https://aws.github.io/eks-charts\nhelm repo update\n</code></pre> Install the AWS Load Balancer Controller on the <code>testGeonode</code> cluster:</p> <p><pre><code>helm install aws-load-balancer-controller eks/aws-load-balancer-controller \\\n    -n kube-system \\\n    --set clusterName=testGeonode \\\n    --set serviceAccount.create=false \\\n    --set serviceAccount.name=aws-load-balancer-controller \\\n    --set region=us-west-1 \\\n    --set vpcId=vpc-XXX \\\n    --set replicaCount=2\n</code></pre> Verify the controller is running: <pre><code>kubectl get deployment -n kube-system aws-load-balancer-controller\n</code></pre></p>"},{"location":"deployment/eks/#4-installing-and-configuring-the-ebs-csi-controller","title":"4. Installing and Configuring the EBS CSI Controller","text":"<p>Install the EBS CSI Driver addon on the <code>testGeonode</code> cluster:</p> <pre><code>eksctl create addon --name aws-ebs-csi-driver --cluster testGeonode --region us-east-1\n</code></pre> <p>Migrate to pod identity if necessary:</p> <pre><code>eksctl utils migrate-to-pod-identity --cluster testGeonode --region us-east-1 --approve\n</code></pre> <p>Verify the EBS CSI Driver pods:</p> <pre><code>kubectl get pods -n kube-system -l app.kubernetes.io/name=aws-ebs-csi-driver\n</code></pre>"},{"location":"deployment/eks/#5-creating-kubernetes-secrets-for-docker-registry","title":"5. Creating Kubernetes Secrets for Docker Registry","text":"<p>Create a Docker registry secret:</p> <pre><code>kubectl create secret docker-registry registrykey \\\n    --docker-server=registry.kan.com.ar \\\n    --docker-username=XXX \\\n    --docker-password=XXX \\\n    --docker-email=XXX\n</code></pre>"},{"location":"deployment/eks/#6-deploying-kubernetes-resources","title":"6. Deploying Kubernetes Resources","text":"<p>To deploy these files in order, follow this workflow:</p> <ul> <li>Cluster and StorageClass<ul> <li><code>cluster.yaml</code> in <code>clusterEksctl</code> (if the cluster is not yet created).</li> <li><code>local-storageclass.yaml</code> in <code>configs/storageclass</code> (to set up the StorageClass before creating volumes).</li> </ul> </li> <li>Database<ul> <li>ConfigMap: <code>gndatabase-configmap.yaml</code> in <code>database/configmaps</code>.</li> <li>PVC: <code>dbdata-pvc.yaml</code> in <code>database/volumes</code>.</li> <li>Deployment: <code>gndatabase-deployment.yaml</code> in <code>database/deployments</code>.</li> <li>Service: <code>gndatabase-service.yaml</code> in <code>database/services</code>.</li> </ul> </li> <li>gn-cloud Components<ul> <li>ConfigMaps in <code>gn-cloud/configmaps</code> (to ensure all configurations are available).</li> <li>PVCs: <code>statics-pvc.yaml</code> and <code>tmp-pvc.yaml</code> in <code>gn-cloud/volumes</code>.</li> <li>Deployments: <code>deploy celery</code>, <code>django</code>, <code>mapstore</code>, <code>memcache</code>, and <code>redis</code> in <code>gn-cloud/deployments</code>.</li> <li>Services for each component in <code>gn-cloud/services</code>.</li> </ul> </li> <li>gs-cloud Components<ul> <li>ConfigMaps in <code>gs-cloud/configmaps</code> (to ensure all configurations are ready).</li> <li>PVCs: <code>geowebcache-data-persistentvolumeclaim.yaml</code> and <code>rabbitmq-data-persistentvolumeclaim.yaml</code> in <code>gs-cloud/volumes</code>.</li> <li>Deployments: <code>deploy acl</code>, <code>gateway</code>, <code>gwc</code>, <code>rabbitmq</code>, <code>rest</code>, <code>wcs</code>, <code>webui</code>, <code>wfs</code>, and <code>wms</code> in <code>gs-cloud/deployments</code>.</li> <li>Services in <code>gs-cloud/services</code>.</li> </ul> </li> <li>Ingress<ul> <li>Finally, apply <code>geonode-ingress.yaml</code> in <code>configs/ingress</code> to expose services externally.</li> </ul> </li> </ul> <p>After completing these steps, verify the status of the pods and services.</p>"},{"location":"deployment/microk8s/","title":"Deployment on MicroK8S","text":"<p>GeoNode Cloud can be deployed on various Kubernetes platforms. Here are the steps for deploying it on MicroK8S.</p>"},{"location":"deployment/microk8s/#requirements","title":"Requirements","text":"<ul> <li>MicroK8S:<ul> <li>Ingress module</li> <li>DNS module</li> <li>Cert-manager module</li> </ul> </li> </ul>"},{"location":"deployment/microk8s/#install-microk8s-with-snap","title":"Install MicroK8S with Snap","text":"<pre><code>sudo snap install microk8s --classic\n</code></pre>"},{"location":"deployment/microk8s/#enable-required-microk8s-modules","title":"Enable Required MicroK8S Modules","text":"<pre><code>microk8s enable ingress\nmicrok8s enable cert-manager\n</code></pre>"},{"location":"deployment/microk8s/#create-cert-manager-configuration-for-lets-encrypt","title":"Create Cert-Manager Configuration for Let's Encrypt","text":"<p>Replace <code>YOUREMAIL@DOMAIN.com</code> with your own email address.</p> <pre><code>microk8s kubectl apply -f - &lt;&lt;EOF\n---\napiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt\nspec:\n  acme:\n    email: YOUREMAIL@DOMAIN.com\n    server: https://acme-v02.api.letsencrypt.org/directory\n    privateKeySecretRef:\n      # Secret resource that will be used to store the account's private key.\n      name: letsencrypt-account-key\n    # Add a single challenge solver, HTTP01 using nginx\n    solvers:\n    - http01:\n        ingress:\n          class: public\nEOF\n</code></pre>"},{"location":"deployment/microk8s/#deployment","title":"Deployment","text":""},{"location":"deployment/microk8s/#clone-the-repository","title":"Clone the Repository","text":"<pre><code>git clone https://github.com/Kan-T-IT/geonode-cloud.git &amp;&amp; cd geonode-cloud\n</code></pre>"},{"location":"deployment/microk8s/#configure-the-environment-variables","title":"Configure the Environment Variables","text":"<p>Edit the <code>.env</code> file with the necessary information:</p> <pre><code>KUBERNETES_SITE_URL=GEONODE_CLOUD_FINAL_URL    # i.e.: cloud.mygeonode.com\nKUBERNETES_NODE_NAME=YOUR_CLUSTER_NAME_NAME    # usually host machine name\nKUBERNETES_VOL_DIR=YOUR_DESIRED_LOCATION       # this path shold exist\nCLUSTER_ISSUER_NAME=YOUR_CLUSTER_ISSUER_NAME   # created earlier in this guide\nSERVER_PUBLIC_IP=YOU.RPU.BLI.CIP               # the public ipv4 of the server\nGEONODE_PASSWORD=admin                         # password for geonode admin user\nGEOSERVER_PASSWORD=geoserver                   # password for geoserver admin user\n</code></pre>"},{"location":"deployment/microk8s/#run-the-installation-script","title":"Run the Installation Script","text":"<pre><code>./install.sh\n</code></pre> <p>GeoNode Cloud should now be ready to use.</p>"},{"location":"integration/","title":"GeoNode integration","text":"<p>Warning</p> <p>GeoServer Cloud experimental GeoNode integration</p>"},{"location":"integration/#configure-geonode-authzn","title":"Configure GeoNode AuthZN","text":"<ol> <li> <p>Go to http://localhost/geoserver/ (note the trailing <code>/</code>).</p> <p>Note</p> <p>Replace localhost with the DNS of your GeoNode deployment if applicable.</p> </li> <li> <p>Log in as <code>admin/geoserver</code>.</p> </li> </ol>"},{"location":"integration/#create-role-service","title":"Create ROLE service","text":"<ol> <li>Navigate to Security -&gt; Users, Groups, Roles -&gt; Services -&gt; Role Services/Add New.</li> <li>Select AuthKEY REST.</li> <li>Set the following values:<ul> <li>Name: <code>geonode REST role service</code></li> <li>Base Server URL: <code>http://django:8000/</code></li> </ul> </li> <li>Save.</li> </ol>"},{"location":"integration/#set-up-geonode-oauth2-security-filter-chain","title":"Set up GeoNode OAuth2 security filter chain","text":"<ol> <li>Go to Security -&gt; Authentication -&gt; New auth filter -&gt; GeoNode Oauth2.</li> <li>Use the following settings:<ul> <li>User Authorization URI: <code>http://localhost/o/authorize/</code></li> <li>Access Token URI: <code>http://django:8000/o/token/</code></li> <li>Redirect URI: <code>http://localhost/geoserver/index.html</code></li> <li>Check Token Endpoint URL: <code>http://django:8000/api/o/v4/tokeninfo/</code></li> <li>Logout URI: <code>http://localhost/account/logout/</code></li> <li>Scopes: <code>write</code></li> <li>Client ID: <code>geonode</code></li> <li>Client Secret: <code>geonodesecret</code></li> <li>ROLE Service: <code>geonode REST role service</code></li> </ul> </li> <li> <p>Save.</p> </li> <li> <p>Go to Filter Chains, and add the <code>geonode</code> filter chain to the web, rest, gwc, and default chains BEFORE (above) the <code>gateway-shared-auth</code> one.</p> </li> <li> <p>Save.</p> </li> <li> <p>Logout. You should see the GeoNode login button now in the GeoServer web UI page header.</p> </li> </ol> <p>Now, log in with <code>geonode</code>, and it should work as usual.</p>"},{"location":"integration/#create-workspace-and-data-store","title":"Create Workspace and Data Store","text":""},{"location":"integration/#create-workspace","title":"Create Workspace","text":"<ol> <li>Go to Workspaces and click on Add new workspace.</li> <li>Enter the following information:<ul> <li>Name: <code>geonode</code></li> <li>Namespace URI: <code>http://www.geonode.org/</code></li> <li>Check the box for Default workspace.</li> </ul> </li> <li>Save.</li> </ol>"},{"location":"integration/#create-data-store","title":"Create Data Store","text":"<ol> <li>Go to Stores and select Add new Store -&gt; PostGIS.</li> <li>Fill in the following details:</li> </ol> <p>Basic Store Information:</p> <ul> <li>Workspace: <code>geonode</code></li> <li>Data Source Name: <code>geonode_data</code></li> <li>Enabled: Check this box.</li> </ul> <p>Connection Parameters:</p> <ul> <li>host: <code>gndatabase</code></li> <li>port: <code>5432</code></li> <li>database: <code>geonode_data</code></li> <li>schema: <code>public</code></li> <li>user: <code>geonode_data</code></li> <li>password: <code>geonode_data</code></li> <li>Namespace: <code>http://www.geonode.org/</code></li> <li> <p>max connections: <code>10</code></p> </li> <li> <p>Optionally, check Expose primary keys if needed.</p> </li> <li>Click Save.</li> </ul>"},{"location":"project/","title":"Project Structure","text":"<p>The project structure for deploying GeoNode Cloud and GeoServer Cloud on Kubernetes is organized into key directories that contain the manifests required to configure and operate the applications. The following repository includes all the manifests needed for deployment.</p> <p>Main Directories</p> <ul> <li>gn-cloud: Contains resources and configurations for deploying GeoNode Cloud.</li> <li>gs-cloud: Includes resources and configurations specific to GeoServer Cloud.</li> <li>configs: Holds general configuration files shared across services.</li> <li>database: Contains database setup and configuration files.</li> </ul>"},{"location":"es/#geonode-cloud","title":"GeoNode Cloud","text":"<p>GeoNode Cloud es una implementaci\u00f3n avanzada de la plataforma GeoNode basada en la nube, optimizada para aprovechar tecnolog\u00edas nativas o adaptadas a la nube. Esta soluci\u00f3n est\u00e1 dise\u00f1ada para desplegarse en Kubernetes, lo que permite escalabilidad, gesti\u00f3n eficiente y resiliencia.</p> <p>GeoNode Cloud incluye el proyecto GeoServer Cloud, que ofrece un s\u00f3lido soporte para la publicaci\u00f3n, edici\u00f3n y gesti\u00f3n de datos geoespaciales. Esta integraci\u00f3n refuerza el rol de GeoNode Cloud como una infraestructura moderna y eficiente para gestionar informaci\u00f3n geoespacial en la nube. </p> <p>Al utilizar GeoNode Cloud, las organizaciones pueden beneficiarse de una mayor flexibilidad, reducci\u00f3n de costos operativos e integraci\u00f3n fluida con otras herramientas y servicios nativos de la nube.</p>"},{"location":"es/architecture/","title":"Arquitectura y tecnolog\u00eda","text":"<p>La arquitectura de la soluci\u00f3n se divide en los siguientes componentes:</p> <ul> <li>GeoNode Cloud Core: Contiene los elementos de infraestructura fundamentales de GeoNode en la nube.</li> <li>GeoNode Cloud Mapstore Client: Proporciona la interfaz de usuario para la visualizaci\u00f3n y manipulaci\u00f3n de mapas.</li> <li>RabbitMQ: Un intermediario de mensajes que facilita la comunicaci\u00f3n as\u00edncrona entre servicios.</li> <li>GeoServer Cloud: Administra y publica datos geoespaciales.</li> <li>Postgres con extensi\u00f3n PostGIS: Una base de datos relacional que permite el almacenamiento y consulta de datos espaciales.</li> <li>Nginx: Un servidor web y balanceador de carga.</li> <li>Flower: Un monitor de tareas de Celery.</li> </ul> <p>El componente GeoNode Cloud Core incluye las siguientes tecnolog\u00edas principales para su funcionamiento:</p> <ul> <li>Framework Django</li> <li>Memcached</li> <li>GeoNode Import</li> <li>pyCSW</li> <li>Celery</li> <li>GeoServer App Django - Capacidad ACL</li> </ul> <p>La arquitectura se basa en un enfoque de microservicios, con planes para descomponer gradualmente los componentes que actualmente est\u00e1n en la configuraci\u00f3n monol\u00edtica de Django en microservicios separados.</p>"},{"location":"es/architecture/#distribucion-y-despliegue","title":"Distribuci\u00f3n y Despliegue","text":"<p>Las im\u00e1genes Docker de todos los servicios est\u00e1n disponibles en DockerHub bajo la organizaci\u00f3n KAN Territory &amp; IT.</p> <p>Los archivos de despliegue listos para producci\u00f3n para <code>docker-compose</code> y <code>podman</code> est\u00e1n disponibles en la carpeta docs/deploy.</p>"},{"location":"es/architecture/#contribuyendo","title":"Contribuyendo","text":"<p>Por favor, lee las directrices de contribuci\u00f3n antes de enviar solicitudes de incorporaci\u00f3n al proyecto GeoNode Cloud.</p> <p>Sigue la gu\u00eda para desarrolladores para obtener m\u00e1s detalles sobre los aspectos t\u00e9cnicos del proyecto.</p>"},{"location":"es/architecture/#estado","title":"Estado","text":"<p>Consulta el changelog para las \u00faltimas actualizaciones.</p>"},{"location":"es/architecture/#errores","title":"Errores","text":"<p>Reporta problemas para GeoNode Cloud en la p\u00e1gina de Issues de GitHub.</p>"},{"location":"es/architecture/#hoja-de-ruta","title":"Hoja de ruta","text":"<p>Por determinar (TBD).</p>"},{"location":"es/deployment/eks/","title":"Implementaci\u00f3n en EKS","text":""},{"location":"es/deployment/eks/#1-configuracion-de-proveedores-oidc-e-iam-para-eks","title":"1. Configuraci\u00f3n de Proveedores OIDC e IAM para EKS","text":"<p>Asociar el proveedor OIDC al cl\u00faster <code>testGeonode</code>:</p> <pre><code>eksctl utils associate-iam-oidc-provider --region us-east-1 --cluster testGeonode --approve\n</code></pre>"},{"location":"es/deployment/eks/#2-creacion-de-la-cuenta-de-servicio-iam-para-aws-load-balancer-controller","title":"2. Creaci\u00f3n de la Cuenta de Servicio IAM para AWS Load Balancer Controller","text":"<p>Para crear la cuenta de servicio IAM y la pol\u00edtica requerida para el AWS Load Balancer Controller:</p> <p>Crear la pol\u00edtica IAM desde el archivo de pol\u00edtica:</p> <pre><code>curl -o iam_policy.json https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/main/docs/install/iam_policy.json\naws iam create-policy --policy-name AWSLoadBalancerControllerIAMPolicy --policy-document file://iam_policy.json\n</code></pre> <p>Crear la cuenta de servicio IAM:</p> <pre><code>eksctl create iamserviceaccount \\\n    --cluster=testGeonode \\\n    --namespace=kube-system \\\n    --name=aws-load-balancer-controller \\\n    --attach-policy-arn=arn:aws:iam::XXX:policy/AWSLoadBalancerControllerIAMPolicy \\\n    --override-existing-serviceaccounts \\\n    --approve\n</code></pre>"},{"location":"es/deployment/eks/#3-instalacion-del-aws-load-balancer-controller-mediante-helm","title":"3. Instalaci\u00f3n del AWS Load Balancer Controller mediante Helm","text":"<p>Agregar el repositorio de Helm de EKS y actualizar:</p> <p><pre><code>helm repo add eks https://aws.github.io/eks-charts\nhelm repo update\n</code></pre> Instalar el AWS Load Balancer Controller en el cl\u00faster <code>testGeonode</code>:</p> <p><pre><code>helm install aws-load-balancer-controller eks/aws-load-balancer-controller \\\n    -n kube-system \\\n    --set clusterName=testGeonode \\\n    --set serviceAccount.create=false \\\n    --set serviceAccount.name=aws-load-balancer-controller \\\n    --set region=us-west-1 \\\n    --set vpcId=vpc-XXX \\\n    --set replicaCount=2\n</code></pre> Verificar que el controlador est\u00e1 funcionando: <pre><code>kubectl get deployment -n kube-system aws-load-balancer-controller\n</code></pre></p>"},{"location":"es/deployment/eks/#4-instalacion-y-configuracion-del-controlador-ebs-csi","title":"4. Instalaci\u00f3n y Configuraci\u00f3n del Controlador EBS CSI","text":"<p>Instalar el addon EBS CSI Driver en el cl\u00faster <code>testGeonode</code>:</p> <pre><code>eksctl create addon --name aws-ebs-csi-driver --cluster testGeonode --region us-east-1\n</code></pre> <p>Migrar a identidad de pod (si es necesario):</p> <pre><code>eksctl utils migrate-to-pod-identity --cluster testGeonode --region us-east-1 --approve\n</code></pre> <p>Verificar los pods del EBS CSI Driver:</p> <pre><code>kubectl get pods -n kube-system -l app.kubernetes.io/name=aws-ebs-csi-driver\n</code></pre>"},{"location":"es/deployment/eks/#5-creacion-de-secretos-de-kubernetes-para-registro-de-docker","title":"5. Creaci\u00f3n de Secretos de Kubernetes para Registro de Docker","text":"<p>Crear un secreto de registro Docker:</p> <pre><code>kubectl create secret docker-registry registrykey \\\n    --docker-server=registry.kan.com.ar \\\n    --docker-username=XXX \\\n    --docker-password=XXX \\\n    --docker-email=XXX\n</code></pre>"},{"location":"es/deployment/eks/#6-despliegue-de-recursos-kubernetes","title":"6. Despliegue de Recursos Kubernetes","text":"<p>Para desplegar estos archivos en orden, sigue este flujo:</p> <ul> <li>Cluster y StorageClass<ul> <li><code>cluster.yaml</code> en <code>clusterEksctl</code> (si el cl\u00faster a\u00fan no est\u00e1 creado).</li> <li><code>local-storageclass.yaml</code> en <code>configs/storageclass</code> (para configurar StorageClass antes de crear vol\u00famenes).</li> </ul> </li> <li>Base de datos<ul> <li>ConfigMap: <code>gndatabase-configmap.yaml</code> en <code>database/configmaps</code>.</li> <li>PVC: <code>dbdata-pvc.yaml</code> en <code>database/volumes</code>.</li> <li>Deployment: <code>gndatabase-deployment.yaml</code> en <code>database/deployments</code>.</li> <li>Service: <code>gndatabase-service.yaml</code> en <code>database/services</code>.</li> </ul> </li> <li>gn-cloud Componentes<ul> <li>ConfigMaps en <code>gn-cloud/configmaps</code> (para que todas las configuraciones est\u00e9n disponibles).</li> <li>PVC: <code>statics-pvc.yaml</code> y <code>tmp-pvc.yaml</code> en <code>gn-cloud/volumes</code>.</li> <li>Deployments: despliega <code>celery</code>, <code>django</code>, <code>mapstore</code>, <code>memcache</code> y <code>redis</code> en <code>gn-cloud/deployments</code>.</li> <li>Services para cada componente en <code>gn-cloud/services</code>.</li> </ul> </li> <li>gs-cloud Componentes<ul> <li>ConfigMaps en <code>gs-cloud/configmaps</code> (para garantizar que todas las configuraciones est\u00e9n listas).</li> <li>PVC: <code>geowebcache-data-persistentvolumeclaim.yaml</code> y <code>rabbitmq-data-persistentvolumeclaim.yaml</code> en <code>gs-cloud/volumes</code>.</li> <li>Deployments: despliega <code>acl</code>, <code>gateway</code>, <code>gwc</code>, <code>rabbitmq</code>, <code>rest</code>, <code>wcs</code>, <code>webui</code>, <code>wfs</code> y <code>wms</code> en <code>gs-cloud/deployments</code>.</li> <li>Services en <code>gs-cloud/services</code>.</li> </ul> </li> <li>Ingress<ul> <li>Finalmente, aplica <code>geonode-ingress.yaml</code> en <code>configs/ingress</code> para exponer los servicios al exterior.</li> </ul> </li> </ul> <p>Despu\u00e9s de realizar estos pasos, verificar el estado de los pods y servicios.</p>"},{"location":"es/deployment/microk8s/","title":"Implementaci\u00f3n en MicroK8S","text":"<p>GeoNode Cloud se puede desplegar en varias plataformas de Kubernetes. Aqu\u00ed est\u00e1n los pasos para desplegarlo en MicroK8S.</p>"},{"location":"es/deployment/microk8s/#requisitos","title":"Requisitos","text":"<ul> <li>MicroK8S:<ul> <li>M\u00f3dulo de ingreso</li> <li>M\u00f3dulo DNS</li> <li>M\u00f3dulo de gesti\u00f3n de certificados</li> </ul> </li> </ul>"},{"location":"es/deployment/microk8s/#instalar-microk8s-con-snap","title":"Instalar MicroK8S con Snap","text":"<pre><code>sudo snap install microk8s --classic\n</code></pre>"},{"location":"es/deployment/microk8s/#habilitar-los-modulos-requeridos-de-microk8s","title":"Habilitar los M\u00f3dulos Requeridos de MicroK8S","text":"<pre><code>microk8s enable ingress\nmicrok8s enable cert-manager\n</code></pre>"},{"location":"es/deployment/microk8s/#crear-configuracion-de-cert-manager-para-lets-encrypt","title":"Crear Configuraci\u00f3n de Cert-Manager para Let's Encrypt","text":"<p>Reemplaza <code>TUEMAIL@DOMINIO.com</code> con tu propia direcci\u00f3n de correo electr\u00f3nico.</p> <pre><code>microk8s kubectl apply -f - &lt;&lt;EOF\n---\napiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\nname: letsencrypt\nspec:\nacme:\nemail: TUEMAIL@DOMINIO.com\nserver: https://acme-v02.api.letsencrypt.org/directory\nprivateKeySecretRef:\n# Recurso de secreto que se utilizar\u00e1 para almacenar la clave privada de la cuenta.\nname: letsencrypt-account-key\n# A\u00f1adir un solo solucionador de desaf\u00edos, HTTP01 usando nginx\nsolvers:\n- http01:\ningress:\nclass: public\nEOF\n</code></pre>"},{"location":"es/deployment/microk8s/#despliegue","title":"Despliegue","text":""},{"location":"es/deployment/microk8s/#clonar-el-repositorio","title":"Clonar el repositorio","text":"<pre><code>git clone https://github.com/Kan-T-IT/geonode-cloud.git &amp;&amp; cd geonode-cloud\n</code></pre>"},{"location":"es/deployment/microk8s/#configurar-las-variables-de-entorno","title":"Configurar las variables de entorno","text":"<p>Edita el archivo <code>.env</code> con la informaci\u00f3n necesaria:</p> <pre><code>KUBERNETES_SITE_URL=GEONODE_CLOUD_FINAL_URL # ejemplo.: cloud.mygeonode.com\nKUBERNETES_NODE_NAME=YOUR_CLUSTER_NAME_NAME # usualmente el nombre de la m\u00e1quina anfitriona\nKUBERNETES_VOL_DIR=YOUR_DESIRED_LOCATION # esta ruta debe existir\nCLUSTER_ISSUER_NAME=YOUR_CLUSTER_ISSUER_NAME # creado anteriormente en esta gu\u00eda\nSERVER_PUBLIC_IP=YOU.RPU.BLI.CIP # la direcci\u00f3n IPv4 p\u00fablica del servidor\nGEONODE_PASSWORD=admin # contrase\u00f1a para el usuario admin de geonode\nGEOSERVER_PASSWORD=geoserver # contrase\u00f1a para el usuario admin de geoserver\n</code></pre>"},{"location":"es/deployment/microk8s/#ejecutar-el-script-de-instalacion","title":"Ejecutar el script de instalaci\u00f3n","text":"<pre><code>./install.sh\n</code></pre> <p>GeoNode Cloud ahora deber\u00eda estar listo para usarse.</p>"},{"location":"es/integration/","title":"Integraci\u00f3n con GeoNode","text":"<p>Warning</p> <p>Integraci\u00f3n experimental de GeoNode en GeoServer Cloud</p>"},{"location":"es/integration/#configurar-authzn-de-geonode","title":"Configurar AuthZN de GeoNode","text":"<ol> <li> <p>Accede a http://localhost/geoserver/ (nota la barra <code>/</code> al final).</p> <p>Note</p> <p>Reemplaza localhost con el DNS de tu implementaci\u00f3n de GeoNode, si corresponde.</p> </li> <li> <p>Inicia sesi\u00f3n como <code>admin/geoserver</code>.</p> </li> </ol>"},{"location":"es/integration/#crear-servicio-de-rol","title":"Crear servicio de ROL","text":"<ol> <li>Navega hasta Seguridad -&gt; Usuarios, Grupos, Roles -&gt; Servicios -&gt; Servicios de Rol/Nuevo Servicio.</li> <li>Selecciona AuthKEY REST.</li> <li>Establece los siguientes valores:<ul> <li>Name: <code>servicio de rol REST de geonode</code></li> <li>Base Server URL: <code>http://django:8000/</code></li> </ul> </li> <li>Guardar.</li> </ol>"},{"location":"es/integration/#configurar-la-cadena-de-filtros-de-seguridad-oauth2-de-geonode","title":"Configurar la cadena de filtros de seguridad OAuth2 de GeoNode","text":"<ol> <li>Accede a Seguridad -&gt; Autenticaci\u00f3n -&gt; Nuevo filtro de autenticaci\u00f3n -&gt; GeoNode Oauth2.</li> <li>Usa las siguientes configuraciones:<ul> <li>User Authorization URI: <code>http://localhost/o/authorize/</code></li> <li>Access Token URI: <code>http://django:8000/o/token/</code></li> <li>Redirect URI: <code>http://localhost/geoserver/index.html</code></li> <li>Check Token Endpoint URL: <code>http://django:8000/api/o/v4/tokeninfo/</code></li> <li>Logout URI: <code>http://localhost/account/logout/</code></li> <li>Scopes: <code>write</code></li> <li>Client ID: <code>geonode</code></li> <li>Client Secret: <code>geonodesecret</code></li> <li>ROLE Service: <code>geonode REST role service</code></li> </ul> </li> <li> <p>Guardar.</p> </li> <li> <p>Accede a Cadenas de Filtros y a\u00f1ade la cadena de filtros <code>geonode</code> a las cadenas web, rest, gwc y default BEFORE (arriba de) la <code>gateway-shared-auth</code>.</p> </li> <li> <p>Guardar.</p> </li> <li> <p>Cierra sesi\u00f3n. Ahora deber\u00edas ver el bot\u00f3n de Inicio de sesi\u00f3n con GeoNode en el encabezado de la p\u00e1gina web de GeoServer.</p> </li> </ol> <p>Ahora, inicia sesi\u00f3n con <code>geonode</code>, y deber\u00eda funcionar como de costumbre.</p>"},{"location":"es/integration/#crear-espacio-de-trabajo-y-almacen-de-datos","title":"Crear Espacio de Trabajo y Almac\u00e9n de Datos","text":""},{"location":"es/integration/#crear-espacio-de-trabajo","title":"Crear Espacio de Trabajo","text":"<ol> <li>Accede a Espacios de Trabajo y haz clic en A\u00f1adir nuevo espacio de trabajo.</li> <li>Introduce la siguiente informaci\u00f3n:<ul> <li>Name: <code>geonode</code></li> <li>Namespace URI: <code>http://www.geonode.org/</code></li> <li>Marca la casilla para Default workspace.</li> </ul> </li> <li>Guardar.</li> </ol>"},{"location":"es/integration/#crear-almacen-de-datos","title":"Crear Almac\u00e9n de Datos","text":"<ol> <li>Ve a Almacenes y selecciona A\u00f1adir nuevo Almac\u00e9n -&gt; PostGIS.</li> <li>Rellena los siguientes detalles:</li> </ol> <p>Informaci\u00f3n B\u00e1sica del Almac\u00e9n:</p> <ul> <li>Workspace: <code>geonode</code></li> <li>Data Source Name: <code>geonode_data</code></li> <li>Enabled: Marca esta casilla.</li> </ul> <p>Par\u00e1metros de Conexi\u00f3n:</p> <ul> <li>host: <code>gndatabase</code></li> <li>port: <code>5432</code></li> <li>database: <code>geonode_data</code></li> <li>schema: <code>public</code></li> <li>user: <code>geonode_data</code></li> <li>password: <code>geonode_data</code></li> <li>Namespace: <code>http://www.geonode.org/</code></li> <li> <p>max connections: <code>10</code></p> </li> <li> <p>Opcionalmente, marca Expose primary keys, si es necesario.</p> </li> <li>Haz clic en Guardar.</li> </ul>"},{"location":"es/project/","title":"Estructura del proyecto","text":"<p>La estructura del proyecto para desplegar GeoNode Cloud y GeoServer Cloud en Kubernetes est\u00e1 organizada en directorios clave que contienen los manifiestos necesarios para configurar y operar las aplicaciones. El siguiente repositorio incluye todos los manifiestos necesarios para el despliegue.</p> <p>Directorios Principales</p> <ul> <li>gn-cloud: Contiene los recursos y configuraciones para desplegar GeoNode Cloud. </li> <li>gs-cloud: Incluye los recursos y configuraciones espec\u00edficas para GeoServer Cloud. </li> <li>configs: Almacena archivos de configuraci\u00f3n generales compartidos entre los servicios. </li> <li>database: Contiene los archivos de configuraci\u00f3n y configuraci\u00f3n de la base de datos.</li> </ul>"},{"location":"pt/#geonode-cloud","title":"GeoNode Cloud","text":"<p>GeoNode Cloud \u00e9 uma implementa\u00e7\u00e3o avan\u00e7ada da plataforma GeoNode baseada em nuvem, otimizada para aproveitar tecnologias nativas ou adaptadas para a nuvem. Esta solu\u00e7\u00e3o \u00e9 projetada para ser implantada em Kubernetes, permitindo escalabilidade, gest\u00e3o eficiente e resili\u00eancia.</p> <p>GeoNode Cloud inclui o projeto GeoServer Cloud, que oferece um forte suporte para a publica\u00e7\u00e3o, edi\u00e7\u00e3o e gest\u00e3o de dados geoespaciais. Essa integra\u00e7\u00e3o refor\u00e7a o papel do GeoNode Cloud como uma infraestrutura moderna e eficiente para a gest\u00e3o de informa\u00e7\u00f5es geoespaciais na nuvem. </p> <p>Ao utilizar o GeoNode Cloud, as organiza\u00e7\u00f5es podem se beneficiar de uma maior flexibilidade, redu\u00e7\u00e3o de custos operacionais e integra\u00e7\u00e3o fluida com outras ferramentas e servi\u00e7os nativos da nuvem.</p>"},{"location":"pt/architecture/","title":"Arquitetura e Tecnologia","text":"<p>A arquitetura da solu\u00e7\u00e3o est\u00e1 dividida nos seguintes componentes:</p> <ul> <li>GeoNode Cloud Core: Cont\u00e9m os elementos de infraestrutura fundamentais do GeoNode na nuvem.</li> <li>GeoNode Cloud Mapstore Client: Fornece a interface de usu\u00e1rio para visualiza\u00e7\u00e3o e manipula\u00e7\u00e3o de mapas.</li> <li>RabbitMQ: Um broker de mensagens que facilita a comunica\u00e7\u00e3o ass\u00edncrona entre servi\u00e7os.</li> <li>GeoServer Cloud: Gerencia e publica dados geoespaciais.</li> <li>Postgres com extens\u00e3o PostGIS: Um banco de dados relacional que permite o armazenamento e consulta de dados espaciais.</li> <li>Nginx: Um servidor web e balanceador de carga.</li> <li>Flower: Um monitor de tarefas para Celery.</li> </ul> <p>O componente GeoNode Cloud Core inclui as seguintes tecnologias principais para sua opera\u00e7\u00e3o:</p> <ul> <li>Django Framework</li> <li>Memcached</li> <li>GeoNode Import</li> <li>pyCSW</li> <li>Celery</li> <li>GeoServer App Django - ACL Capability</li> </ul> <p>A arquitetura \u00e9 baseada em uma abordagem de microsservi\u00e7os, com planos de decompor gradualmente componentes atualmente dentro da configura\u00e7\u00e3o monol\u00edtica do Django em microsservi\u00e7os separados.</p>"},{"location":"pt/architecture/#distribuicao-e-implantacao","title":"Distribui\u00e7\u00e3o e Implanta\u00e7\u00e3o","text":"<p>As imagens Docker para todos os servi\u00e7os est\u00e3o dispon\u00edveis no DockerHub sob a organiza\u00e7\u00e3o KAN Territory &amp; IT.</p> <p>Os arquivos de implanta\u00e7\u00e3o prontos para produ\u00e7\u00e3o para <code>docker-compose</code> e <code>podman</code> est\u00e3o dispon\u00edveis na pasta docs/deploy.</p>"},{"location":"pt/architecture/#contribuindo","title":"Contribuindo","text":"<p>Leia as diretrizes de contribui\u00e7\u00e3o antes de enviar pull requests para o projeto GeoNode Cloud.</p> <p>Siga o guia do desenvolvedor para mais detalhes sobre os aspectos t\u00e9cnicos do projeto.</p>"},{"location":"pt/architecture/#status","title":"Status","text":"<p>Consulte o changelog para as \u00faltimas atualiza\u00e7\u00f5es.</p>"},{"location":"pt/architecture/#bugs","title":"Bugs","text":"<p>Relate problemas para o GeoNode Cloud na p\u00e1gina de Issues do GitHub.</p>"},{"location":"pt/architecture/#roadmap","title":"Roadmap","text":"<p>A ser determinado (TBD).</p>"},{"location":"pt/deployment/eks/","title":"Implanta\u00e7\u00e3o no EKS","text":""},{"location":"pt/deployment/eks/#1-configurando-provedores-oidc-e-iam-para-eks","title":"1. Configurando Provedores OIDC e IAM para EKS","text":"<p>Associe o provedor OIDC ao cluster <code>testGeonode</code>:</p> <pre><code>eksctl utils associate-iam-oidc-provider --region us-east-1 --cluster testGeonode --approve\n</code></pre>"},{"location":"pt/deployment/eks/#2-criando-a-conta-de-servico-iam-para-o-aws-load-balancer-controller","title":"2. Criando a Conta de Servi\u00e7o IAM para o AWS Load Balancer Controller","text":"<p>Para criar a conta de servi\u00e7o IAM e a pol\u00edtica necess\u00e1ria para o AWS Load Balancer Controller: </p> <p>Crie a pol\u00edtica IAM a partir do arquivo de pol\u00edtica:</p> <pre><code>curl -o iam_policy.json https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/main/docs/install/iam_policy.json\naws iam create-policy --policy-name AWSLoadBalancerControllerIAMPolicy --policy-document file://iam_policy.json\n</code></pre> <p>Crie a conta de servi\u00e7o IAM:</p> <pre><code>eksctl create iamserviceaccount \\\n    --cluster=testGeonode \\\n    --namespace=kube-system \\\n    --name=aws-load-balancer-controller \\\n    --attach-policy-arn=arn:aws:iam::XXX:policy/AWSLoadBalancerControllerIAMPolicy \\\n    --override-existing-serviceaccounts \\\n    --approve\n</code></pre>"},{"location":"pt/deployment/eks/#3-instalando-o-aws-load-balancer-controller-com-helm","title":"3. Instalando o AWS Load Balancer Controller com Helm","text":"<p>Adicione o reposit\u00f3rio Helm do EKS e atualize:</p> <p><pre><code>helm repo add eks https://aws.github.io/eks-charts\nhelm repo update\n</code></pre> Instale o AWS Load Balancer Controller no cluster <code>testGeonode</code>:</p> <p><pre><code>helm install aws-load-balancer-controller eks/aws-load-balancer-controller \\\n    -n kube-system \\\n    --set clusterName=testGeonode \\\n    --set serviceAccount.create=false \\\n    --set serviceAccount.name=aws-load-balancer-controller \\\n    --set region=us-west-1 \\\n    --set vpcId=vpc-XXX \\\n    --set replicaCount=2\n</code></pre> Verifique se o controlador est\u00e1 em execu\u00e7\u00e3o: <pre><code>kubectl get deployment -n kube-system aws-load-balancer-controller\n</code></pre></p>"},{"location":"pt/deployment/eks/#4-instalando-e-configurando-o-controlador-ebs-csi","title":"4. Instalando e Configurando o Controlador EBS CSI","text":"<p>Instale o driver EBS CSI no cluster <code>testGeonode</code>:</p> <pre><code>eksctl create addon --name aws-ebs-csi-driver --cluster testGeonode --region us-east-1\n</code></pre> <p>Migre para a identidade de pod, se necess\u00e1rio:</p> <pre><code>eksctl utils migrate-to-pod-identity --cluster testGeonode --region us-east-1 --approve\n</code></pre> <p>Verifique os pods do driver EBS CSI:</p> <pre><code>kubectl get pods -n kube-system -l app.kubernetes.io/name=aws-ebs-csi-driver\n</code></pre>"},{"location":"pt/deployment/eks/#5-criando-segredos-do-kubernetes-para-registro-docker","title":"5. Criando Segredos do Kubernetes para Registro Docker","text":"<p>Crie um segredo para o registro Docker:</p> <pre><code>kubectl create secret docker-registry registrykey \\\n    --docker-server=registry.kan.com.ar \\\n    --docker-username=XXX \\\n    --docker-password=XXX \\\n    --docker-email=XXX\n</code></pre>"},{"location":"pt/deployment/eks/#6-implantando-recursos-do-kubernetes","title":"6. Implantando Recursos do Kubernetes","text":"<p>Para implantar esses arquivos na ordem correta, siga este fluxo:</p> <ul> <li>Cluster e StorageClass<ul> <li><code>cluster.yaml</code> em <code>clusterEksctl</code> (se o cluster ainda n\u00e3o tiver sido criado).</li> <li><code>local-storageclass.yaml</code> em <code>configs/storageclass</code> (para configurar o StorageClass antes de criar volumes).</li> </ul> </li> <li>Banco de dados<ul> <li>ConfigMap: <code>gndatabase-configmap.yaml</code> em <code>database/configmaps</code>.</li> <li>PVC: <code>dbdata-pvc.yaml</code> em <code>database/volumes</code>.</li> <li>Implanta\u00e7\u00e3o: <code>gndatabase-deployment.yaml</code> em <code>database/deployments</code>.</li> <li>Servi\u00e7o: <code>gndatabase-service.yaml</code> em <code>database/services</code>.</li> </ul> </li> <li>Componentes gn-cloud<ul> <li>ConfigMaps em <code>gn-cloud/configmaps</code> (para garantir que todas as configura\u00e7\u00f5es estejam dispon\u00edveis).</li> <li>PVCs: <code>statics-pvc.yaml</code> e <code>tmp-pvc.yaml</code> em <code>gn-cloud/volumes</code>.</li> <li>Implanta\u00e7\u00f5es: <code>deploy celery</code>, <code>django</code>, <code>mapstore</code>, <code>memcache</code> e <code>redis</code> em <code>gn-cloud/deployments</code>.</li> <li>Servi\u00e7os para cada componente em <code>gn-cloud/services</code>.</li> </ul> </li> <li>Componentes gs-cloud<ul> <li>ConfigMaps em <code>gs-cloud/configmaps</code> (para garantir que todas as configura\u00e7\u00f5es estejam prontas).</li> <li>PVCs: <code>geowebcache-data-persistentvolumeclaim.yaml</code> e <code>rabbitmq-data-persistentvolumeclaim.yaml</code> em <code>gs-cloud/volumes</code>.</li> <li>Implanta\u00e7\u00f5es: <code>deploy acl</code>, <code>gateway</code>, <code>gwc</code>, <code>rabbitmq</code>, <code>rest</code>, <code>wcs</code>, <code>webui</code>, <code>wfs</code> e <code>wms</code> em <code>gs-cloud/deployments</code>.</li> <li>Servi\u00e7os em <code>gs-cloud/services</code>.</li> </ul> </li> <li>Entrada<ul> <li>Por fim, aplique <code>geonode-ingress.yaml</code> em <code>configs/ingress</code> para expor servi\u00e7os externamente.</li> </ul> </li> </ul> <p>Depois de concluir essas etapas, verifique o status dos pods e servi\u00e7os.</p>"},{"location":"pt/deployment/microk8s/","title":"Implanta\u00e7\u00e3o no MicroK8S","text":"<p>GeoNode Cloud pode ser implantado em v\u00e1rias plataformas Kubernetes. Abaixo est\u00e3o os passos para implant\u00e1-lo no MicroK8S.</p>"},{"location":"pt/deployment/microk8s/#requisitos","title":"Requisitos","text":"<ul> <li>MicroK8S:<ul> <li>M\u00f3dulo Ingress</li> <li>M\u00f3dulo DNS</li> <li>M\u00f3dulo Cert-manager</li> </ul> </li> </ul>"},{"location":"pt/deployment/microk8s/#instalar-o-microk8s-com-snap","title":"Instalar o MicroK8S com Snap","text":"<pre><code>sudo snap install microk8s --classic\n</code></pre>"},{"location":"pt/deployment/microk8s/#habilitar-modulos-necessarios-do-microk8s","title":"Habilitar M\u00f3dulos Necess\u00e1rios do MicroK8S","text":"<pre><code>microk8s enable ingress\nmicrok8s enable cert-manager\n</code></pre>"},{"location":"pt/deployment/microk8s/#criar-configuracao-do-cert-manager-para-o-lets-encrypt","title":"Criar Configura\u00e7\u00e3o do Cert-Manager para o Let's Encrypt","text":"<p>Substitua <code>SEUEMAIL@DOMINIO.com</code> pelo seu pr\u00f3prio endere\u00e7o de e-mail.</p> <pre><code>microk8s kubectl apply -f - &lt;&lt;EOF\n---\napiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\nname: letsencrypt\nspec:\nacme:\nemail: SEUEMAIL@DOMINIO.com\nserver: https://acme-v02.api.letsencrypt.org/directory\nprivateKeySecretRef:\n# Recurso Secret que ser\u00e1 usado para armazenar a chave privada da conta..\nname: letsencrypt-account-key\n# Adicionar um \u00fanico resolvedor de desafio, HTTP01 usando nginx\nsolvers:\n- http01:\ningress:\nclass: public\nEOF\n</code></pre>"},{"location":"pt/deployment/microk8s/#implantacao","title":"Implanta\u00e7\u00e3o","text":""},{"location":"pt/deployment/microk8s/#clonar-o-repositorio","title":"Clonar o Reposit\u00f3rio","text":"<pre><code>git clone https://github.com/Kan-T-IT/geonode-cloud.git &amp;&amp; cd geonode-cloud\n</code></pre>"},{"location":"pt/deployment/microk8s/#configurar-as-variaveis-de-ambiente","title":"Configurar as Vari\u00e1veis de Ambiente","text":"<p>Edite o arquivo <code>.env</code> com as informa\u00e7\u00f5es necess\u00e1rias:</p> <pre><code>KUBERNETES_SITE_URL=GEONODE_CLOUD_FINAL_URL # Ex.: cloud.mygeonode.com\nKUBERNETES_NODE_NAME=NOME_DO_SEU_CLUSTER # Geralmente \u00e9 o nome da m\u00e1quina host\nKUBERNETES_VOL_DIR=LOCAL_DESEJADO # Esse caminho deve existir\nCLUSTER_ISSUER_NAME=NOME_DO_SEU_CLUSTER_ISSUER # Criado anteriormente neste guia\nSERVER_PUBLIC_IP=SEU.IP.PUB.LICO # O IPv4 p\u00fablico do servidor\nGEONODE_PASSWORD=admin # Senha para o usu\u00e1rio admin do geonode\nGEOSERVER_PASSWORD=geoserver # Senha para o usu\u00e1rio admin do geoserver\n</code></pre>"},{"location":"pt/deployment/microk8s/#executar-o-script-de-instalacao","title":"Executar o Script de Instala\u00e7\u00e3o","text":"<pre><code>./install.sh\n</code></pre> <p>GeoNode Cloud agora deve estar pronto para uso.</p>"},{"location":"pt/integration/","title":"Integra\u00e7\u00e3o com o GeoNode","text":"<p>Warning</p> <p>Integra\u00e7\u00e3o experimental GeoNode no GeoServer Cloud</p>"},{"location":"pt/integration/#configurar-authzn-do-geonode","title":"Configurar AuthZN do GeoNode","text":"<ol> <li> <p>Acesse http://localhost/geoserver/ (note a barra <code>/</code> no final).</p> <p>Note</p> <p>Substitua localhost pelo DNS da sua implanta\u00e7\u00e3o do GeoNode, se aplic\u00e1vel.</p> </li> <li> <p>Fa\u00e7a login como <code>admin/geoserver</code>.</p> </li> </ol>"},{"location":"pt/integration/#criar-servico-de-papel-role","title":"Criar servi\u00e7o de PAPEL (ROLE)","text":"<ol> <li>Navegue at\u00e9 Seguran\u00e7a -&gt; Usu\u00e1rios, Grupos, Pap\u00e9is -&gt; Servi\u00e7os -&gt; Servi\u00e7os de Papel/Novo Servi\u00e7o.</li> <li>Selecione AuthKEY REST.</li> <li>Defina os seguintes valores:<ul> <li>Name: <code>geonode REST role service</code></li> <li>Base Server URL: <code>http://django:8000/</code></li> </ul> </li> <li>Salvar.</li> </ol>"},{"location":"pt/integration/#configurar-cadeia-de-filtros-de-seguranca-oauth2-do-geonode","title":"Configurar cadeia de filtros de seguran\u00e7a OAuth2 do GeoNode","text":"<ol> <li>V\u00e1 para Seguran\u00e7a -&gt; Autentica\u00e7\u00e3o -&gt; Novo filtro de autentica\u00e7\u00e3o -&gt; GeoNode Oauth2.</li> <li>Use as seguintes configura\u00e7\u00f5es:<ul> <li>User Authorization URI: <code>http://localhost/o/authorize/</code></li> <li>Access Token URI: <code>http://django:8000/o/token/</code></li> <li>Redirect URI: <code>http://localhost/geoserver/index.html</code></li> <li>Check Token Endpoint URL: <code>http://django:8000/api/o/v4/tokeninfo/</code></li> <li>Logout URI: <code>http://localhost/account/logout/</code></li> <li>Scopes: <code>write</code></li> <li>Client ID: <code>geonode</code></li> <li>Client Secret: <code>geonodesecret</code></li> <li>ROLE Service: <code>geonode REST role service</code></li> </ul> </li> <li> <p>Salvar.</p> </li> <li> <p>Acesse Cadeias de Filtros e adicione a cadeia de filtros <code>geonode</code> \u00e0s cadeias web, rest, gwc e default ANTES (acima) da <code>gateway-shared-auth</code>.</p> </li> <li> <p>Salvar.</p> </li> <li> <p>Fa\u00e7a logout. Agora voc\u00ea deve ver o bot\u00e3o Login do GeoNode no cabe\u00e7alho da p\u00e1gina da interface web do GeoServer.</p> </li> </ol> <p>Agora, fa\u00e7a login com <code>geonode</code>, e ele deve funcionar normalmente.</p>"},{"location":"pt/integration/#criar-espaco-de-trabalho-e-armazenamento-de-dados","title":"Criar Espa\u00e7o de Trabalho e Armazenamento de Dados","text":""},{"location":"pt/integration/#criar-espaco-de-trabalho","title":"Criar Espa\u00e7o de Trabalho","text":"<ol> <li>Acesse Espa\u00e7os de Trabalho e clique em Adicionar novo espa\u00e7o de trabalho.</li> <li>Insira as seguintes informa\u00e7\u00f5es:<ul> <li>Name: <code>geonode</code></li> <li>Namespace URI: <code>http://www.geonode.org/</code></li> <li>Marque a caixa para Default workspace.</li> </ul> </li> <li>Salvar.</li> </ol>"},{"location":"pt/integration/#criar-armazenamento-de-dados","title":"Criar Armazenamento de Dados","text":"<ol> <li>V\u00e1 para Armazenamentos e selecione Adicionar novo Armazenamento -&gt; PostGIS.</li> <li>Preencha os seguintes detalhes:</li> </ol> <p>Informa\u00e7\u00f5es B\u00e1sicas do Armazenamento:</p> <ul> <li>Workspace: <code>geonode</code></li> <li>Data Source Name: <code>geonode_data</code></li> <li>Enabled: Marque esta caixa.</li> </ul> <p>Par\u00e2metros de Conex\u00e3o:</p> <ul> <li>host: <code>gndatabase</code></li> <li>port: <code>5432</code></li> <li>database: <code>geonode_data</code></li> <li>schema: <code>public</code></li> <li>user: <code>geonode_data</code></li> <li>password: <code>geonode_data</code></li> <li>Namespace: <code>http://www.geonode.org/</code></li> <li> <p>max connections: <code>10</code></p> </li> <li> <p>Opcionalmente, marque Expose primary keys, se necess\u00e1rio.</p> </li> <li>Clique em Save.</li> </ul>"},{"location":"pt/project/","title":"Estrutura do Projeto","text":"<p>A estrutura do projeto para implantar o GeoNode Cloud e o GeoServer Cloud no Kubernetes est\u00e1 organizada em diret\u00f3rios principais que cont\u00eam os manifestos necess\u00e1rios para configurar e operar as aplica\u00e7\u00f5es. O reposit\u00f3rio a seguir inclui todos os manifestos necess\u00e1rios para a implanta\u00e7\u00e3o.</p> <p>Diret\u00f3rios Principais</p> <ul> <li>gn-cloud: Cont\u00e9m recursos e configura\u00e7\u00f5es para implantar o GeoNode Cloud. </li> <li>gs-cloud: Inclui recursos e configura\u00e7\u00f5es espec\u00edficos para o GeoServer Cloud.</li> <li>configs: Cont\u00e9m arquivos de configura\u00e7\u00e3o gerais compartilhados entre os servi\u00e7os.</li> <li>database: Cont\u00e9m arquivos de configura\u00e7\u00e3o e configura\u00e7\u00e3o do banco de dados.</li> </ul>"}]}